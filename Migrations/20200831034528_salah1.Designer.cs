// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SafeCity2607last.Data;
using System;

namespace SafeCity2607last.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200831034528_salah1")]
    partial class salah1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SafeCity2607last.Models.Admin", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("CustomerName")
                        .IsRequired();

                    b.Property<int>("CustomerTypeId");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("CustomerId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("SafeCity2607last.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SafeCity2607last.Models.Chercheur", b =>
                {
                    b.Property<int>("id_pub")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("date");

                    b.Property<int>("etat");

                    b.Property<int>("explication");

                    b.Property<int>("heure");

                    b.Property<int>("id_comment");

                    b.Property<int>("id_cq");

                    b.Property<string>("id_source")
                        .IsRequired();

                    b.Property<int>("lati");

                    b.Property<int>("longi");

                    b.Property<int>("pho1");

                    b.Property<int>("pho2");

                    b.Property<int>("pho3");

                    b.Property<int>("publication");

                    b.Property<int>("rue");

                    b.Property<int>("secteur");

                    b.Property<int>("ville");

                    b.HasKey("id_pub");

                    b.ToTable("Chercheur");
                });

            modelBuilder.Entity("SafeCity2607last.Models.CommentairesdePublic", b =>
                {
                    b.Property<int>("CommentaireId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("NomCommentaire")
                        .IsRequired();

                    b.HasKey("CommentaireId");

                    b.ToTable("CommentairesdePublic");
                });

            modelBuilder.Entity("SafeCity2607last.Models.ControleurdeQualité", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("VendorName")
                        .IsRequired();

                    b.Property<int>("VendorTypeId");

                    b.Property<string>("ZipCode");

                    b.HasKey("VendorId");

                    b.ToTable("ControleurdeQualité");
                });

            modelBuilder.Entity("SafeCity2607last.Models.Message", b =>
                {
                    b.Property<int>("Id_Mes")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTime>("Heure");

                    b.Property<int>("Id_Com");

                    b.Property<int>("Id_Source");

                    b.Property<string>("Messagee");

                    b.Property<string>("Ville");

                    b.HasKey("Id_Mes");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("SafeCity2607last.Models.MessageAuPublic", b =>
                {
                    b.Property<int>("Id_Mes")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTime>("Heure");

                    b.Property<int>("Id_Com");

                    b.Property<int>("Id_Source");

                    b.Property<string>("Message");

                    b.Property<string>("Ville");

                    b.HasKey("Id_Mes");

                    b.ToTable("MessageAuPublic");
                });

            modelBuilder.Entity("SafeCity2607last.Models.MessagePersonnalise", b =>
                {
                    b.Property<int>("Id_Mes")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTime>("Heure");

                    b.Property<int>("Id_Com");

                    b.Property<int>("Id_Source");

                    b.Property<string>("Message");

                    b.Property<string>("Ville");

                    b.HasKey("Id_Mes");

                    b.ToTable("MessagePersonnalise");
                });

            modelBuilder.Entity("SafeCity2607last.Models.MessageRecu", b =>
                {
                    b.Property<int>("Id_Mes")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTime>("Heure");

                    b.Property<int>("Id_Com");

                    b.Property<int>("Id_Source");

                    b.Property<string>("Messagee");

                    b.Property<string>("Ville");

                    b.HasKey("Id_Mes");

                    b.ToTable("MessageRecu");
                });

            modelBuilder.Entity("SafeCity2607last.Models.NumberSequence", b =>
                {
                    b.Property<int>("NumberSequenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LastNumber");

                    b.Property<string>("Module")
                        .IsRequired();

                    b.Property<string>("NumberSequenceName")
                        .IsRequired();

                    b.Property<string>("Prefix")
                        .IsRequired();

                    b.HasKey("NumberSequenceId");

                    b.ToTable("NumberSequence");
                });

            modelBuilder.Entity("SafeCity2607last.Models.Proposition", b =>
                {
                    b.Property<int>("Id_Prop")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTime>("Heure");

                    b.Property<int>("Id_Com");

                    b.Property<int>("Id_Source");

                    b.Property<string>("Propositionn");

                    b.Property<string>("Ville");

                    b.HasKey("Id_Prop");

                    b.ToTable("Proposition");
                });

            modelBuilder.Entity("SafeCity2607last.Models.Publication", b =>
                {
                    b.Property<int>("id_pub")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("date");

                    b.Property<string>("etat");

                    b.Property<string>("explication");

                    b.Property<DateTime>("heure");

                    b.Property<int>("id_comment");

                    b.Property<int>("id_cq");

                    b.Property<int>("id_source");

                    b.Property<int>("lati");

                    b.Property<int>("longi");

                    b.Property<string>("pho1");

                    b.Property<string>("pho2");

                    b.Property<string>("pho3");

                    b.Property<string>("publication");

                    b.Property<string>("rue");

                    b.Property<string>("secteur");

                    b.Property<string>("ville");

                    b.HasKey("id_pub");

                    b.ToTable("Publication");
                });

            modelBuilder.Entity("SafeCity2607last.Models.Publications", b =>
                {
                    b.Property<int>("id_pub")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("date");

                    b.Property<string>("explication");

                    b.Property<DateTime>("heure");

                    b.Property<int>("id_comment");

                    b.Property<int>("id_cq");

                    b.Property<int>("id_source");

                    b.Property<int>("lati");

                    b.Property<int>("longi");

                    b.Property<string>("pho1");

                    b.Property<string>("pho2");

                    b.Property<string>("pho3");

                    b.Property<string>("publication");

                    b.Property<string>("rue");

                    b.Property<string>("secteur");

                    b.Property<string>("ville");

                    b.HasKey("id_pub");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("SafeCity2607last.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdressePostale");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("CIN");

                    b.Property<string>("ConfirmPassword");

                    b.Property<DateTime>("Datedebut");

                    b.Property<DateTime>("Datefin");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("OldPassword");

                    b.Property<string>("Password");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("Ville");

                    b.HasKey("UserProfileId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SafeCity2607last.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SafeCity2607last.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SafeCity2607last.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SafeCity2607last.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
